package org.example.algorithm.sort;

public class Sort {
    /**
     * 정렬
     *
     * 데이터가 있을 때 특정값을 기준으로 데이터를 순서대로 배치하는 방법
     * 구현 난이도는 쉽지만, 속도는 느린 알고리즘 = 버블 , 삽입, 선력
     * 구현 난이도 어렵지만, 속도 빠른 = 합병, 힙, 퀵, 트리
     * 하이브리드 = 팀, 블록 병합, 인트로
     * 기타 = 기수 , 카운팅, 셀, 보고
     * 
     * 합병정렬
     * 배열을 분할해 길이가 1이 되도록 만들고, 인접 부분끼리 정렬하며 합병하는 방식
     * 
     * 힙정렬
     * 힙자료구조 형태의 정렬방식
     * 기존 배열을 최대 힙으로 구조 변경 후 정렬 진행
     * 
     * 퀵정렬
     * 임의 기준[ pivot ] 값을 정하고 그 값을 기준으로 좌우로 분하라며 정렬
     * 왼 -> 오 큰값(pivot기준) , 오 -> 왼 작은값(pivot기준) 교체
     * 
     * 트리정렬
     * 이진탐색트리를 만들어 정렬하는 방식
     *
     * 기수 정렬 Radix
     * 낮은 자리수 부터 정렬 방법
     * 각 원소간 비교 연산은 하지 않습니다. 기수 테이블(Queue) 위한 메모리 필요
     *
     * 계수 정렬
     * 숫자끼리 비교 없이 카운트 세서 정렬
     * 카운팅(Array) 필요 메모리 필요
     *
     * 쉘 정렬
     * 삽입정렬 약점 보완, ( 오른차순 정렬 기준, 기존데이터 내림차순일때 모두 비교 )
     * 이전의 모든 데이터와 비교데이터와 비교하지 않고 간격대로 비교
     *
     */



}
