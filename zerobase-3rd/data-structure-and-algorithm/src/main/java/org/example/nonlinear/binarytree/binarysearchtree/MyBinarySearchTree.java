package org.example.nonlinear.binarytree.binarysearchtree;

public class MyBinarySearchTree {
    /**
     * 이진 탐색 트리 BST
     * 왼쪽자식 노드의 키는 부모노드의 키보다 작음
     * 오른쪽 자식 노드의 키는 부모노드의 키보다큼
     * 각각의 서브 트리도 이진 탐색 트리를 유지
     * 중복된 키를 허용하지 않음
     *
     *
     * 탐색
     * 루트 노드부터 비교 시작
     * 대소 비교하여 찾는 데이터가 작으면 왼쪽, 크면 오른쪽
     * 찾는 데이터가 없으면 null
     * 어떤 데이터를 찾더라도 최대 트리높이 만큼가능
     *
     *
     * 삽입
     * Root 부터 비교 시작 중복키 발견시 노드 추가하지 않고 종료
     * 삽입할 키가 현재 노드의 키보다 작으면 왼쪽이동
     * 삽입할 키가 현재 노드의 키보다 크면 오른쪽이동
     * leaf노드에 도달 후 키 비교하며 작으면 왼쪽, 크면 오른쪽
     *
     * 삭제
     * 삭제 대상 노드가 leaf 노드인 경우 -> 삭제 대상노드 삭제 -> 부모 노드의 해당 자식링크 null변경
     * 삭제 대상 노드에 자식노드가 하나 있는 경우 -> 자식 노드를 삭제 대상 노드의 부모 노드에 연결 -> 삭제 대상 노드 연결
     * 삭제 대상 노드에 자식노드가 둘인 경우
     *  - 삭제 대상 노드의 왼쪽 서브트리에서 가장 큰 노드 선택
     *  - 삭제 대상 노드의 오른쪽 서브트리에서 가장 작은 노드 선택
     *      - 위 두 방법중 선택한 노드를 삭제 대상노드 위치로 올림 -> 위로 올리는 과정에서 다른 자식노드 링크 연결 작업 -> 대상 노드 삭제
     *
     *
     *
     */
}
