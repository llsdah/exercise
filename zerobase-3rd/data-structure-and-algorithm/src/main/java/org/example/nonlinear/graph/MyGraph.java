package org.example.nonlinear.graph;

public class MyGraph {
    /**
     * 정점과 간선으로 이루어지는 자료 구조 Cyclic
     * 연결된 정점간 관계를 표현할 수 있는 자료 구조
     *
     * 그래프 용도
     * 지하철 노선도, 통신 네트워크
     *
     * 정점 Vertex : 각 노드
     * 간선 Edge : 노드와 노드를 연결하는 선 link, branch
     * 인접 정점 Adjacent vertex : 간선 하나를 두고 바로 연결된 정점
     *
     * 정점 차주 Degree
     * 무방향 그래프에서 하나의 정점에 인접한 정점의 수
     * 무방향 그래프 모든 정점 차수의 합 = 그래프 간선의 수 2배
     *
     * 진입 차수 In-degree : 방향 그래프에서 외무에서 오는 간선의 수
     * 진출 차수 out-degree : 방향 그래프에서 외부로 나가는 간선의 수
     * 경로 길이 Path length : 경로를 구성하는데 사용된 간선의 수
     * 단순 경로 Simple path : 경로 중에서 반복되는 정점이 없는 경우
     * 사이클 : 단순 경로의 시작 정점과 끝 정점이 동일한 경우
     *
     *
     * 그래프 종류
     * 무방향 그래프 ( 양방향 )
     * 방향 그래프
     * 가중치 그래프
     * 완전 그래프 (모든 정점이 서로 연결된 그래프 )
     *
     * DFS 깊이 우선 탐색 Depth First Search
     * 각 노드에 방문했는지 여부를 체크할 배열과 스택 이용 구현
     *
     * BFS 너비 우선 탐색 Breath First Search
     * 각 노드에 방문 했는지 여부를 체크할 배열과 큐 이용
     *
     * 그래프 구현
     * 인접행렬 Adjeacency Matrix
     * 2차원 배열 이용 - 간선정보의 확인고 업데이트가 빠르지만, 메모리 공간 필요
     * 노드의 갯수가 적고, 간선의 수가 많을때 좋다
     *
     * 인접 리스트 Adjacency List
     * 연결리스트 이용 - 메모리 사용량이 상대적으로 적고, 노드의 추가 삭제 빠름, 간선정보 확인이 오래걸림
     * 노드의 갯수가 많고, 간선의 수가 적을때 좋다.
     *
     */

}
